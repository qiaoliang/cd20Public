<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自动化测试 on 持续交付 2.0</title>
    <link>http://www.continuousdelivery20.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 自动化测试 on 持续交付 2.0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 02 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.continuousdelivery20.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用自描述性的测试方法名</title>
      <link>http://www.continuousdelivery20.com/blog/tott-writing-descriptive/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-writing-descriptive/</guid>
      <description>使用描述性的测试名称 猜一猜你会花多长时间才能了解下面这段测试代码用来验证什么样的行为? @Test public void isUserLockedOut_invalidLogin() { authenticator.authenticate(username, invalidPassword); assertFalse(authenticator.isUserLockedOut(username)); authenticator.authenticate(username, invalidPassword); assertFalse(authenticator.isUserLockedOut(username)); authenticator.authenticate(username, invalidPassword); assertTrue(authenticator.isUserLockedOut(username)); } 你可能要从头到尾读完每一</description>
    </item>
    
    <item>
      <title>Mob Refectoring：扎堆儿编程的一次经历</title>
      <link>http://www.continuousdelivery20.com/blog/mob-programming/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/mob-programming/</guid>
      <description>这是我在2009年带领 GoCD 团队时的一个经历。套用现在的时髦词汇，就叫“mob programming”。 团队对某一模块的代码进行了一次重构，引入</description>
    </item>
    
    <item>
      <title>最大化开发人员的效率</title>
      <link>http://www.continuousdelivery20.com/blog/maximizing-developer-effectiveness/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/maximizing-developer-effectiveness/</guid>
      <description>原文链接： https://martinfowler.com/articles/developer-effectiveness.html 科技在不断地变得更加智能和强大，新技术不断被引入到组织内，以提升整体生产力。而这也会增加复杂性和开发人员的认知开销，减少了他们个</description>
    </item>
    
    <item>
      <title>微软:测试左移，让其运行更快、更可靠</title>
      <link>http://www.continuousdelivery20.com/blog/ms-devops-shift-left/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/ms-devops-shift-left/</guid>
      <description>我们原来是怎么工作的 2014年9月，我们已经进入了云计算的第三个年头。然而，我们当时仍旧是按照云计算时代之前的那种传统方式进行测试。 我们试图</description>
    </item>
    
    <item>
      <title>微软：测试右移，生产环境上的持续测试</title>
      <link>http://www.continuousdelivery20.com/blog/ms-devops-shift-right-test-in-production/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/ms-devops-shift-right-test-in-production/</guid>
      <description>生产环境是唯一的，无法复制 这是我们重要变某的第三部分，也是最后一部分。正如你见过的，我们减少了对在实验室内做功能测试的依赖，转而使用单元测试</description>
    </item>
    
  </channel>
</rss>