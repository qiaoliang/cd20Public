<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代码质量 on 持续交付 2.0</title>
    <link>http://www.continuousdelivery20.com/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/</link>
    <description>Recent content in 代码质量 on 持续交付 2.0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 10 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.continuousdelivery20.com/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>保证原因与影响清晰</title>
      <link>http://www.continuousdelivery20.com/blog/tott-keep-cause-clear/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-keep-cause-clear/</guid>
      <description>保证原因与影响清晰 下面的这个测试写的正确吗？ 208: @Test public void testIncrement_existingKey() { 209: assertEquals(9, tally.get(&amp;#34;key1&amp;#34;)); 210: } 事实上，如果不知道tally这个对象是如何准备的，你就根本不可能确认它是否</description>
    </item>
    
    <item>
      <title>只验证发生状态变化的方法调用</title>
      <link>http://www.continuousdelivery20.com/blog/tott-only-verify-state-changing/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-only-verify-state-changing/</guid>
      <description>只验证发生状态变化的方法调用 下面的哪一行代码可以被安全地移除？ @Test public void addPermissionToDatabase() { new UserAuthorizer(mockUserService, mockPermissionDb).grantPermission(USER, READ_ACCESS); // The test will fail if any of these methods is not called. verify(mockUserService).isUserActive(USER); verify(mockPermissionDb).getPermissions(USER); verify(mockPermissionDb).isValidPermission(READ_ACCESS); verify(mockPermissionDb).addPermission(USER, READ_ACCESS); } 答案是：可以删除用于验</description>
    </item>
    
    <item>
      <title>使用封闭服务进行端到端的测试（Hermetic Servers）！</title>
      <link>http://www.continuousdelivery20.com/blog/tott-hermetic-servers/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-hermetic-servers/</guid>
      <description>想像一下，我们有一个复杂的富Web应用程序。在其之下，可能是由错综复杂的服务器集群提供服务，每个服务器执行不同的任务，而且大多数服务器之间都</description>
    </item>
    
    <item>
      <title>在测试用例中对服务调用进行契约检查！</title>
      <link>http://www.continuousdelivery20.com/blog/tott-exercise-service-call/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-exercise-service-call/</guid>
      <description>在测试用例中对服务调用进行契约检查 下面的测试用例将对 CloudService 的服务调用进行模拟替代（mocks）。 这个测试用例真的能为我们提供足够的信心吗，它让你</description>
    </item>
    
    <item>
      <title>清晰地创建测试数据！</title>
      <link>http://www.continuousdelivery20.com/blog/tott-fake-your-way-to/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-fake-your-way-to/</guid>
      <description>使用冒充者(faked)，让测试做得更好 在写了多年博客之后，你决定尝试一下所用的博客平台的API。你开始练习使用它，但你意识到一个问题：你的</description>
    </item>
    
    <item>
      <title>不要把逻辑放在测试用例中！</title>
      <link>http://www.continuousdelivery20.com/blog/tott-dont-put-logic-in/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-dont-put-logic-in/</guid>
      <description>不要把逻辑放在测试用例中！ **编程语言给了我们很大的表达能力。**运算符和条件表达式等概念是重要的工具，让我们能够编写程序，处理各种各样的输</description>
    </item>
    
    <item>
      <title>清晰地创建测试数据！</title>
      <link>http://www.continuousdelivery20.com/blog/tott-clearly-create-test-data/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-clearly-create-test-data/</guid>
      <description>清晰创建测试数据 **Helper方法让创建测试数据变得更容易。但随着时间的推移，它们会变得更难理解。**因为您需要测试数据的更多变形，来满足</description>
    </item>
    
    <item>
      <title>像变更检测器一样的测试代码，是有害的！</title>
      <link>http://www.continuousdelivery20.com/blog/tott-change-detector-tests/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-change-detector-tests/</guid>
      <description>像变更检测器一样的测试代码，是有害的！ 想像一下，你刚刚完成一次重构（没有改变该应用的外部行为），正打算提交这次变更。但是，为了安全起见，你打</description>
    </item>
    
    <item>
      <title>避免写出不稳定的测试</title>
      <link>http://www.continuousdelivery20.com/blog/tott-avoiding-flakey-tests/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/tott-avoiding-flakey-tests/</guid>
      <description>避免写出不稳定的测试 不稳定的测试会让你的生活更加困难。您会收到失败通知，便也没什么帮助。你甚至可能因对失败已麻木而错过了一个真实的失败条件。</description>
    </item>
    
  </channel>
</rss>