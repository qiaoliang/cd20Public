<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>持续集成 on 持续交付 2.0</title>
    <link>http://www.continuousdelivery20.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</link>
    <description>Recent content in 持续集成 on 持续交付 2.0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 28 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.continuousdelivery20.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>原子性提交是持续交付的必备技能</title>
      <link>http://www.continuousdelivery20.com/blog/atomic-submission/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/atomic-submission/</guid>
      <description>“坚持少做，持续分解，坚持反馈，持续改善”是《持续交付 2.0 》一书中最为重要的四大工作原则。 它们在代码提交与 Code Review 中的应用就是：提交的原子性。 原子</description>
    </item>
    
    <item>
      <title>Facebook 如何进行大规模持续交付</title>
      <link>http://www.continuousdelivery20.com/blog/facebook-rapid-release/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/facebook-rapid-release/</guid>
      <description>软件行业已经想出了多种方法来更快、更安全、更高质量地交付代码。其中许多工作集中在诸如持续集成、持续交付、敏捷开发、DevOps 和测试驱动开发</description>
    </item>
    
    <item>
      <title>如何写好提交注释</title>
      <link>http://www.continuousdelivery20.com/blog/good-commit-message/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/good-commit-message/</guid>
      <description>提交注释不应该仅仅作为可有可无的附代说明，而应该作为一个公开文档，用于向未来的读者说明所做的工作以及原因。它和代码同等重要，而且也会与代码一</description>
    </item>
    
    <item>
      <title> 利用抽象分支技术，进行大规模软件的增量式改造</title>
      <link>http://www.continuousdelivery20.com/blog/abstract-branch/</link>
      <pubDate>Mon, 18 May 2009 00:00:00 +0000</pubDate>
      
      <guid>http://www.continuousdelivery20.com/blog/abstract-branch/</guid>
      <description>很多开发团队通常严重依赖于版本控制系统的分支功能。分布式版本控制系统让分支操作更加方便。然而，在《持续交付》一书中描述的很多非常规言论中，就</description>
    </item>
    
  </channel>
</rss>